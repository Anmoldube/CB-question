class Solution {
    public List<List<Integer>> combinationSum2(int[] arr, int n) {
         List<List<Integer>> list =  new ArrayList<>();
            ArrayList<Integer> ll  =  new ArrayList<>();
        Arrays.sort(arr);
        Comb(arr, n, 0, ll, list);
        return list;
    }

    public static void Comb(int[] arr, int target, int idx, ArrayList<Integer> ll, List<List<Integer>> list) {
        if (target == 0) {
            list.add(new ArrayList<>(ll));
            return;
        }
        for (int i = idx; i < arr.length; i++) {
            if (i > idx && arr[i] == arr[i - 1]) 
                continue;
            if (target - arr[i] >= 0) {
                ll.add(arr[i]);
                Comb(arr, target - arr[i], i + 1, ll,list);
                ll.remove(ll.size() - 1);
            }
        }
    }
}
