import java.util.Scanner;
public class BinaryTreecb {
    Scanner sc = new Scanner(System.in);
    public class Node{
            int data;
            Node left;
            Node right;
    }
    private Node root;

    public BinaryTreecb(){
        this.root = CreateTree();
    }

    public Node CreateTree(){
            int item = sc.nextInt();
            Node nn = new Node();
            nn.data = item;
            boolean hllc = sc.nextBoolean(); // left sub tree crate hoga. recursion baby...
            if(hllc == true){
                nn.left = CreateTree();
            }
            boolean hlrc = sc.nextBoolean();
            if(hlrc == true){
                    nn.right = CreateTree(); //right sub tree hoga. recursion baby...
            }
            return nn;
    }
        public void Display(){
            Display(this.root);
        }

    public  void Display(Node node){
                if(node == null){
                    return;
                }
                String str = "";
                str = str +node+"-- >";
                str = "<--" + str + "-->";
                if(node.left != null){
                    str = node.left.data+str;
                }
                else{
                    str = "." + str;
                }
                if(node.right != null){
                    str = str+node.right.data;
                } else{
                    str = str + ".";
                }
                System.out.println(str);
                Display(node.left);
                Display(node.right);
    }
    public int max(){
        return max(this.root);
    }
    private int max(Node node){
        if(node == null){
            return Integer.MAX_VALUE;
        }

        int lmax = max(node.left);
        int rmax = max(node.right);
        return Math.max(lmax, Math.max(rmax, node.data));

    }
    public boolean find(int item){
                return find(this.root,item);
    }
        private boolean find(Node node,  int item){
                return find(node.left, item) || find(node.right,item);
        }
        public void PreOrder(){
                PreOrder(this.root);
                System.out.println();
        }
        private void PreOrder(Node node){
                System.out.println(node.data+ " ");
                PreOrder(node.left);
                PreOrder(node.right);
        }
        public void InOrder(){
            InOrder(this.root);
            System.out.println();
    }
    private void InOrder(Node node){
            InOrder(node.left);
            System.out.println(node.data+ " ");
            InOrder(node.right);
    }
    public void PostOrder(){
        PostOrder(this.root);
        System.out.println();
}
private void PostOrder(Node node){
        PostOrder(node.left);
        PostOrder(node.right);
        System.out.println(node.data+ " ");
    }
}
