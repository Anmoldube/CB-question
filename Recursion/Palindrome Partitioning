class Solution {
    public List<List<String>> partition(String s) {
     List<List<String>> list = new ArrayList<>();
        ArrayList<String> ll = new ArrayList<>();
        Partition(s, ll,list);
        return list;
    }
    public static void Partition(String str,ArrayList<String> ll, List<List<String>> list) {
        if (str.length() == 0) {
            list.add(new ArrayList<String>(ll));
            return;
        }
        for (int i = 1; i <= str.length(); i++) {
            String c = str.substring(0, i);
            if (isPalindrome(c)==true) {
                ll.add(c);
                Partition(str.substring(i), ll,list);
                ll.remove(ll.size()-1);
            }
        }
    }
    public static boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
